<?xml version="1.0"?>

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">
	
  
  <binding id="CoHeToolbox" extends="chrome://global/content/bindings/toolbar.xml#toolbox">

  	<implementation>
  		
      <field name="anonymous">false</field>
      <field name="palette">null</field>
  	  
  	  <constructor>
  	    <![CDATA[
  	    	
  	    	var paletteId = "BrowserToolbarPalette";
	  	    
	  	    var tt = (typeof document.toolbarpalettes == "object") ? true : false;
	  	    
  	    	if(this.CoHePalette && !tt) return;
  	    		
	  	    if(document.getElementById(paletteId)) {
	  	    	document.CoHePalette = document.getElementById(paletteId).cloneNode(true);
	  	    }
	  	    else if(tt && document.toolbarpalettes[paletteId]){
	  	    	document.CoHePalette = document.toolbarpalettes[paletteId];
	  	    }
	  	    
	        this.palette = document.CoHePalette;
	        this.CoHePalette = true;
	        
  	    ]]>
  	  </constructor>
  	</implementation>	
  </binding>
  
  
  <binding id="CoHeToolbar">
    <implementation implements="nsIAccessibleProvider">
      <property name="accessibleType" readonly="true">
        <getter>
          return Components.interfaces.nsIAccessibleProvider.XULToolbar;
        </getter>
      </property>
      <field name="firstPermanentChild">
        null
      </field>
      <field name="lastPermanentChild">
        null
      </field>
      <field name="palette">null</field>

      <property name="toolbarName"
          onget="return this.getAttribute('toolbarname');"
          onset="this.setAttribute('toolbarname', val); return val;"/>

      <constructor>
      <![CDATA[
        
        // Searching for the toolbox palette in the toolbar binding because
        // toolbars are constructed first.
        var toolbox = (this.localName == 'statusbar') ? this : this.parentNode;
        
         if (!toolbox.palette) {
          // Look to see if there is a toolbarpalette.
          var node = toolbox.firstChild;
          while (node) {
            if (node.localName == "toolbarpalette")
              break;
            node = node.nextSibling;
          }
          
          if (!node)
            return;

          // Hold on to the palette but remove it from the document.
          toolbox.palette = node;
          toolbox.removeChild(node);
        }
        
        // Build up our contents from the palette.
        var currentSet = this.getAttribute("currentset");
        if (!currentSet)
          currentSet = this.getAttribute("defaultset");
        if (currentSet) {
          this.currentSet = currentSet;
         
          // Update attribute, items may have been uninstalled..
          this.setAttribute("currentset", this.currentSet);
          // Persist currentset only on fixed toolbars, not user defined toolbars..
          if (!this.hasAttribute("customindex"))
            document.persist(this.id, "currentset");
        }

        // If only one toolbar in toolbox and it's empty, set it..
        var count = 0;
        var child = toolbox.lastChild;
        while(child) {
          if (child.localName == "toolbar")
            ++count;
          child = child.previousSibling;
        }
        
        if (count <= 1 && this.currentSet == "__empty")
          toolbox.setAttribute("empty", true);
      ]]>
      </constructor>
      
      <property name="currentSet">
        <getter>
        <![CDATA[
          var node = this.firstChild;
          var currentSet = "";
          while (node) {
            if (node.id &&
                (this.localName == "statusbar" && !node.hasAttribute("removed")) || 
                node.localName == "toolbaritem" || 
                node.localName == "toolbarbutton" ||
                node.localName == "toolbarseparator" ||
                node.localName == "toolbarspring" ||
                node.localName == "toolbarspacer")
            {
              if (currentSet)
                currentSet += ",";

              if (node.localName == "toolbarseparator")
                currentSet += "separator";
              else if (node.localName == "toolbarspring")
                currentSet += "spring";
              else if (node.localName == "toolbarspacer")
                currentSet += "spacer";
              else
                currentSet += node.id;
            }
            node = node.nextSibling;
          }
           
          return currentSet ? currentSet : "__empty";
        ]]>
        </getter>

        <setter>
        <![CDATA[
         
          // Remove all items before the first permanent child and after the last permanent child.
          while (this.lastChild) {
            if (this.lastChild == this.lastPermanentChild ||
                (this.lastChild.localName == "toolbarpaletteitem" &&
                this.lastChild.firstChild == this.lastPermanentChild))
              break;
            this.removeChild(this.lastChild);
          }

          while (this.firstChild) {
            if (this.firstChild == this.firstPermanentChild ||
                (this.firstChild.localName == "toolbarpaletteitem" &&
                this.firstChild.firstChild == this.firstPermanentChild))
              break;
            this.removeChild(this.firstChild);
          }

          var firstChildID = this.firstPermanentChild ? this.firstPermanentChild.id : "";
          var lastChildID = this.lastPermanentChild ? this.lastPermanentChild.id : "";

          if (val && val != "__empty") {
            var itemIds = val.split(",");
            var before = true;
            for (var i = 0; i < itemIds.length; i++) {
              if (itemIds[i] == firstChildID || itemIds[i] == lastChildID)
                before = false;
              else
                this.insertItem(itemIds[i], null, null, before);
            }
          }
          return val;
        ]]>
        </setter>
      </property>

      <method name="insertItem">
         <parameter name="aId"/>
         <parameter name="aBeforeElt"/>
         <parameter name="aWrapper"/>
         <parameter name="aBeforePermanent"/>
         <body>
         <![CDATA[
           var newItem = null;
           
           // Create special cases of palette items.
           var uniqueId;
           if (aId == "separator") {
             newItem = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul",
                                                "toolbarseparator");
             uniqueId = (new Date()).getTime()+this.childNodes.length;
             newItem.id = "separator" + uniqueId;
             newItem.className = "chromeclass-toolbar-additional";
           } else if (aId == "spring") {
             newItem = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul",
                                                "toolbarspring");
             uniqueId = (new Date()).getTime()+this.childNodes.length;
             newItem.flex = 1;
             newItem.id = "spring" + uniqueId;
             newItem.className = "chromeclass-toolbar-additional";
           } else if (aId == "spacer") {
             newItem = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul",
                                                "toolbarspacer");
             uniqueId = (new Date()).getTime()+this.childNodes.length;
             newItem.id = "spacer" + uniqueId;
             newItem.className = "chromeclass-toolbar-additional";
           } else if (this.parentNode.localName == "toolbox" || this.localName == "statusbar") {
             
             //if (document.getElementById(aId))
               //return false;
             // Attempt to locate an item with a matching id within palette.
             var paletteItem = this.parentNode.palette.firstChild;
             while (paletteItem) {
               var paletteId = paletteItem.id;
               if (paletteId == aId) {
                 newItem = paletteItem.cloneNode(true);
                 break;
               }
               paletteItem = paletteItem.nextSibling;
             }
           }
           
           if (!newItem)
             return false;

           var insertItem = newItem;
           
           // Wrap the item in another node if so inclined.
           if (aWrapper) {
             aWrapper.appendChild(newItem);
             insertItem = aWrapper;
           }
           
           // Insert the palette item into the toolbar.
           if (aBeforeElt)
             this.insertBefore(insertItem, aBeforeElt);
           else if (aBeforePermanent && this.firstPermanentChild)
             this.insertBefore(insertItem, this.firstPermanentChild);
           else
             this.appendChild(insertItem);
              
           return newItem;
         ]]>
         </body>
      </method>
    </implementation>
  </binding>
  
  
  <!-- like chrome://global/content/bindings/toolbar.xml#toolbarpaletteitem, but with a vbox rather than hbox 
  <binding id="toolbarpaletteitem-vertical" extends="chrome://global/content/bindings/toolbar.xml#toolbar-base" display="xul:button">
    <content>
      <xul:vbox class="toolbarpaletteitem-box" flex="1" xbl:inherits="type,place">
        <children/>
      </xul:vbox>
    </content>
  </binding>-->
  
</bindings>